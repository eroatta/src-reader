@@startuml System Class Diagram

package domain {
    class domain.Project {
        + ID : string
    }

    class domain.File {
        + ID : string
        + Name : string
    }
    domain.Project *-- domain.File : has many

    class domain.Identifier {
        + ID : int
        + Name : string
        + Type : string
    }
    domain.Identifier -- domain.Project : extracted from >

    class domain.Metric {
        + ID : int
        + Type : string
    }
    domain.Metric -- domain.Project : counts for >

    enum domain.MetricType {
        + Project
        + Global
    }
    domain.Metric -- domain.MetricType : defines scope >
}

package repository {
    interface repository.ProjectRepository {
        Add(ctx context.Context, p domain.Project) error
        Get(ctx context.Context, ID string) (domain.Project, error)
        AddFiles(ctx context.Context, projectID string, files []domain.File)
        GetFiles(ctx context.Context, projectID string) ([]domain.File, error)
        GetFile(ctx context.Context, filename string) (domain.File, error)
    }

    interface repository.RawProjectRepository {
        Clone(ctx context.Context, p domain.Project) error
    }

    interface repository.IdentifierRepository {
        Add(ctx context.Context, domain.Identifier) error
    }

    interface repository.MetricRepository {
        Add(ctx context.Context, m domain.Metric) error
        GetMetric(ctx context.Context, p domain.Project, metricName string) (domain.Metric, error)
        GetAllMetrics(ctx context.Context, p domain.Project) ([]domain.Metric, error)
    }
}

usecase --> repository : accesses through >
usecase --> domain : handles >

package usecase {
    interface usecase.ImportProjectUseCase {
        Import(ctx context.Context, url string) (domain.Project, error)
    }

    interface usecase.CollectProjectMetrics {
        Collect(ctx context.Context, ID string) ([]Metric, error)
    }

    interface usecase.CollectGlobalMetrics {
        Collect(ctx context.Context) error
    }

    usecase.ImportProjectUseCase -[hidden]> usecase.CollectProjectMetrics
    usecase.CollectProjectMetrics -[hidden]> usecase.CollectGlobalMetrics
}

together {
    package adapter.cli {}
    adapter.cli --> usecase : exposes >

    package adapter.rest {}
    adapter.rest --> usecase : exposes >

    package adapter.cloner {}
    adapter.cloner --> repository.RawProjectRepository : implements access to >

    package adapter.persistence {}
    adapter.persistence --> repository.ProjectRepository : implements access to >
}

@@enduml
