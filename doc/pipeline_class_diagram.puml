@@startuml Pipeline Class Diagram

package step {
    interface Splitter {
        Name() string
        Split(entity.Identifier) []string
    }

    interface Expander {
        Name() string
        ApplicableOn() string
        Expand(entity.Identifier) []string
    }
}

package splitter {
    Splitter <|--- Conserv
    Splitter <|--- Greedy
    Splitter <|--- Samurai
    Splitter <|--- GenTest

    class splitter.Functions <<(F, orchid)>> {
        NewConserv() step.Splitter
        NewGreedy() step.Splitter
        NewSamurai(FrequencyTable, FrequencyTable) step.Splitter
    }

    class Conserv
    Conserv --> token.conserv

    class Greedy
    Greedy ---> token.greedy

    class Samurai
    Samurai ---> token.samurai

    class GenTest
    GenTest ---> token.gentest
}

package expander {
    Expander <|--- Basic
    Expander <|--- AMAP
    Expander <|--- Normalize

    class expander.Functions <<(F, orchid)>> {
        NewBasic() step.Expander
        NewAMAP() step.Expander
        NewNormalize() step.Expander
    }

    class Basic
    Basic ---> token.basic

    class AMAP
    AMAP ---> token.amap

    class Normalize
    Normalize ---> token.gentest
}

package token.conserv {
    class Functions <<(F, orchid)>> {
        Split(string) []string
    }
}

package token.greedy {
    class token.greedy.Functions <<(F, orchid)>> {
        Split(string, List) []string
    }
}

package token.samurai {
    class token.samurai.Functions <<(F, orchid)>> {
        Split(string, TokenContext, List, List) []string
    }
}

package token.gentest {
    class token.gentest.Functions <<(F, orchid)>> {
        Split(string, SimilarityCalculator, List, Set) []string
        Expand(string, SimilarityCalculator, List, Set) []string
    }
}

package token.basic {
    class token.basic.Functions <<(F, orchid)>> {
        Expand(string, Set, map[string]string, Set) []string
    }
}

package token.amap {
    class token.amap.Functions <<(F, orchid)>>  {
        Expand(string, TokenScope, []string) []string
    }
}

@@enduml