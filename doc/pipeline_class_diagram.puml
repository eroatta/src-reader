@@startuml Pipeline Class Diagram

interface Splitter {
    Name() string
    Split(string) []string
}

package splitter {
    Splitter <|--- Conserv
    Splitter <|--- Greedy
    Splitter <|--- Samurai

    class splitter.Functions <<(F, orchid)>> {
        NewConserv() step.Splitter
        NewGreedy() step.Splitter
        NewSamurai(FrequencyTable, FrequencyTable) step.Splitter
    }

    class Conserv
    Conserv --> token.Conserv

    class Greedy
    Greedy ---> token.Greedy

    class Samurai
    Samurai ---> token.Samurai
}

interface Expander {
    Name() string
    Expand([]string) []string
}

package expander {
    Expander <|--- Basic
    Expander <|--- AMAP
    Expander <|--- Normalize

    class expander.Functions <<(F, orchid)>> {
        NewBasic() step.Expander
        NewAMAP() step.Expander
        NewNormalize() step.Expander
    }

    class Basic
    Basic ---> token.Basic

    class AMAP
    AMAP ---> token.AMAP

    class Normalize
    Normalize ---> token.Normalize
}

package token {
    class Conserv <<module>> {
        Split(string) []string
    }

    class Greedy <<module>> {
        Split(string, List) []string
    }

    class Samurai <<module>> {
        Split(string, TokenContext, List, List) []string
    }

    class GenTest <<module>> {
        Split(string, SimilarityCalculator, List, Set) []string
    }

    class Basic <<module>> {
        Expand(string, Set, map[string]string, Set) []string
    }

    class AMAP <<module>> {
        Expand(string, TokenScope, []string) []string
    }

    class Normalize <<module>> {
        Expand(string, SimilarityCalculator, List, Set) []string
    }
}

package token {
    package list {
        interface List {

        }
    }
    
    package expansion {
        interface Set {

        }
    }
}

@@enduml